'use client';

import React from 'react';
import Link from 'next/link';
import { useRouter } from 'next/navigation';
import { City } from '@/src/types';
import { createRegionSlug } from '@/src/utils/slug';
import ShareButton from '@/components/ShareButton';
import TouristAttractionsSlider from '@/src/components/city/TouristAttractionsSlider';
import { ExternalLink } from 'lucide-react';

interface CityInfoProps {
  city: City | null;
  hoveredCity?: City | null;
}

const CityInfo: React.FC<CityInfoProps> = ({ city, hoveredCity }) => {
  const router = useRouter();

  const handleViewFullPage = () => {
    if (!city) return;
    router.push(`/city/${city.slug}`);
  };

  // Show hovered city info if hovering, otherwise show selected city
  const displayCity = hoveredCity || city;

  if (!displayCity) {
    return (
      <div className="p-6 bg-white rounded-lg shadow-sm border border-gray-200">
        <div className="text-center py-12">
          <svg className="w-16 h-16 text-gray-300 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth={2}
              d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"
            />
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
          </svg>
          <h2 className="text-2xl font-bold text-gray-800 mb-2">ƒê·ªãa L√Ω Vi·ªát Nam</h2>
          <p className="text-gray-600 mb-4">Ch·ªçn m·ªôt th√†nh ph·ªë tr√™n b·∫£n ƒë·ªì ƒë·ªÉ t√¨m hi·ªÉu th√™m th√¥ng tin</p>
          <div className="bg-gradient-to-r from-blue-50 to-green-50 p-6 rounded-lg">
            <h3 className="text-lg font-semibold text-gray-800 mb-3">V·ªÅ 34 ƒê∆°n V·ªã H√†nh Ch√≠nh C·∫•p T·ªânh Vi·ªát Nam</h3>
            <p className="text-gray-700 leading-relaxed">
              Sau khi s√°p nh·∫≠p h√†nh ch√≠nh, Vi·ªát Nam d·ª± ki·∫øn c√≥ 34 ƒë∆°n v·ªã h√†nh ch√≠nh c·∫•p t·ªânh. Vi·ªác t·ªï ch·ª©c l·∫°i n√†y nh·∫±m
              t·ªëi ∆∞u h√≥a qu·∫£n l√Ω, n√¢ng cao hi·ªáu qu·∫£ h√†nh ch√≠nh v√† th√∫c ƒë·∫©y s·ª± ph√°t tri·ªÉn c√¢n b·∫±ng gi·ªØa c√°c v√πng mi·ªÅn
              tr√™n c·∫£ n∆∞·ªõc.
            </p>
          </div>
        </div>
      </div>
    );
  }

  const paragraphs = displayCity.description.split('. ');
  const para1 = paragraphs.slice(0, Math.ceil(paragraphs.length / 3)).join('. ');
  const para2 = paragraphs.slice(Math.ceil(paragraphs.length / 3), Math.ceil((2 * paragraphs.length) / 3)).join('. ');
  const para3 = paragraphs.slice(Math.ceil((2 * paragraphs.length) / 3)).join('. ');

  return (
    <div className="p-6 bg-white rounded-lg shadow-sm border border-gray-200">
      {/* Hover indicator */}
      {hoveredCity && (
        <div className="mb-4 p-3 bg-amber-50 border border-amber-200 rounded-lg">
          <div className="flex items-center gap-2">
            <div className="w-2 h-2 bg-amber-500 rounded-full animate-pulse"></div>
            <span className="text-sm font-medium text-amber-700">ƒêang xem th√¥ng tin: {hoveredCity.name}</span>
          </div>
        </div>
      )}

      {/* Header */}
      <div className="flex items-start justify-between mb-6">
        <div className="flex-1">
          <div className="flex items-center gap-2 mb-2">
            <div className="w-4 h-4 rounded-full" style={{ backgroundColor: displayCity.color }} />
            <span className="text-sm text-gray-500">M√£ ƒë∆°n v·ªã h√†nh ch√≠nh: {displayCity.code}</span>
          </div>
          <h1
            className="text-2xl font-bold text-gray-800 mb-1 hover:text-blue-800 cursor-pointer"
            onClick={handleViewFullPage}
          >
            {displayCity.name}
          </h1>
          <p className="text-gray-600">
            V√πng mi·ªÅn:{' '}
            <Link
              href={`/region/${createRegionSlug(displayCity.region)}`}
              className="text-blue-600 hover:text-blue-800 hover:underline"
            >
              {displayCity.region}
            </Link>
          </p>
        </div>
      </div>

      {/* Stats */}
      <div className="grid grid-cols-2 gap-4 mb-6">
        <div className="bg-blue-50 p-4 rounded-lg">
          <div className="flex items-center gap-2 mb-2">
            <svg className="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={2}
                d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0z"
              />
            </svg>
            <span className="text-sm font-medium text-blue-800">D√¢n s·ªë</span>
          </div>
          <p className="text-lg font-bold text-blue-900">{displayCity.population}</p>
        </div>
        <div className="bg-green-50 p-4 rounded-lg">
          <div className="flex items-center gap-2 mb-2">
            <svg className="w-5 h-5 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={2}
                d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"
              />
            </svg>
            <span className="text-sm font-medium text-green-800">Di·ªán t√≠ch</span>
          </div>
          <p className="text-lg font-bold text-green-900">{displayCity.area}</p>
        </div>
      </div>

      {/* Former names */}
      {displayCity.oldNames.length > 0 && (
        <div className="mb-6">
          <h3 className="text-sm font-semibold text-gray-700 mb-2">Bao g·ªìm c√°c t·ªânh / th√†nh ph·ªë c≈©:</h3>
          <div className="flex flex-wrap gap-2">
            {displayCity.oldNames.map((name, index) => (
              <span key={index} className="px-3 py-1 bg-gray-100 text-gray-700 text-sm rounded-full">
                {name}
              </span>
            ))}
          </div>
        </div>
      )}

      {/* Description */}
      <div className="space-y-4">
        <h3 className="text-lg font-semibold text-gray-800">V·ªÅ {displayCity.name}</h3>

        <div className="space-y-4 text-gray-700 leading-relaxed">
          <p>
            {para1}
            {para1.endsWith('.') ? '' : '.'}
          </p>
          {para2 && (
            <p>
              {para2}
              {para2.endsWith('.') ? '' : '.'}
            </p>
          )}
          {para3 && (
            <p>
              {para3}
              {para3.endsWith('.') ? '' : '.'}
            </p>
          )}
        </div>
      </div>

      {/* Tourist Attractions Slider - only show for selected city, not hovered */}
      {!hoveredCity && city && city.touristAttractions && city.touristAttractions.length > 0 && (
        <div className="mt-6">
          <TouristAttractionsSlider attractions={city.touristAttractions} />
        </div>
      )}

      {/* Educational Game Link */}
      {!hoveredCity && city && (
        <div className="mt-6">
          <h3 className="text-lg font-semibold text-gray-800 mb-3">Tr√≤ ch∆°i h·ªçc t·∫≠p</h3>
          <a
            target="_blank"
            rel="noopener noreferrer"
            href={`${process.env.NEXT_PUBLIC_EDUCATION_URL}/practice/vietnamese-heritage-explorer-3d`}
            className="block p-4 bg-gradient-to-r from-green-500 to-teal-500 rounded-lg text-white hover:scale-105 transform transition-transform duration-200 shadow-lg hover:shadow-xl"
          >
            <div className="flex items-center gap-4">
              <span className="text-4xl">üó∫Ô∏è</span>
              <div>
                <h4 className="font-bold text-lg">Kh√°m Ph√° Di S·∫£n Vi·ªát Nam 3D</h4>
                <p className="text-sm">
                  Du h√†nh qua c√°c ƒë·ªãa danh v√† t√¨m hi·ªÉu vƒÉn h√≥a c·ªßa {city.name} trong th·∫ø gi·ªõi 3D.
                </p>
              </div>
            </div>
            <ExternalLink className="w-3 h-3 ml-1" />
          </a>
        </div>
      )}

      {/* Action buttons - only show for selected city, not hovered */}
      {!hoveredCity && city && (
        <div className="mt-6 pt-6 border-t border-gray-200">
          <div className="flex gap-3">
            <button
              onClick={handleViewFullPage}
              className="flex-1 bg-blue-600 text-white py-2 px-4 rounded-lg hover:bg-blue-700 transition-colors duration-200 font-medium cursor-pointer"
            >
              Xem Trang ƒê·∫ßy ƒê·ªß
            </button>
            <ShareButton
              title={`${city.name} - ƒê·ªãa L√Ω Vi·ªát Nam | K2AiHub`}
              description={`T√¨m hi·ªÉu v·ªÅ ${city.name} - ${city.description.substring(0, 100)}...`}
              url={typeof window !== 'undefined' ? `${window.location.origin}/city/${city.slug}` : ''}
            />
          </div>
        </div>
      )}
    </div>
  );
};

export default CityInfo;
