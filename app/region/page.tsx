import type { Metadata } from "next";
import Link from 'next/link';
import { citiesData } from "@/data/cities";
import { createTitle, createDescription, createKeywords } from '@/utils/seo';

export const metadata: Metadata = {
  title: createTitle("Kh√°m Ph√° C√°c V√πng Mi·ªÅn Vi·ªát Nam - 9 V√πng ƒê·ªãa L√Ω"),
  description: createDescription("T√¨m hi·ªÉu v·ªÅ 9 v√πng ƒë·ªãa l√Ω c·ªßa Vi·ªát Nam: B·∫Øc B·ªô, T√¢y B·∫Øc, ƒê√¥ng B·∫Øc, ƒê·ªìng b·∫±ng B·∫Øc B·ªô, B·∫Øc Trung B·ªô, Nam Trung B·ªô, T√¢y Nguy√™n, ƒê√¥ng Nam B·ªô v√† ƒê·ªìng b·∫±ng s√¥ng C·ª≠u Long"),
  keywords: createKeywords([
    "v√πng mi·ªÅn Vi·ªát Nam",
    "ƒë·ªãa l√Ω Vi·ªát Nam", 
    "B·∫Øc B·ªô",
    "Trung B·ªô", 
    "Nam B·ªô",
    "T√¢y Nguy√™n",
    "ƒê·ªìng b·∫±ng",
    "34 t·ªânh th√†nh"
  ]),
  authors: [{ name: "K2AiHub Team" }],
  openGraph: {    locale: 'vi_VN',
    siteName: 'K2AiHub - N·ªÅn t·∫£ng h·ªçc t·∫≠p th√¥ng minh',

    title: createTitle("Kh√°m Ph√° 9 V√πng Mi·ªÅn Vi·ªát Nam"),
    description: createDescription("C√πng t√¨m hi·ªÉu v·ªÅ ƒë·∫∑c ƒëi·ªÉm ƒë·ªãa l√Ω, vƒÉn h√≥a v√† kinh t·∫ø c·ªßa 9 v√πng mi·ªÅn Vi·ªát Nam"),
    type: "website",
  },
  twitter: {
    card: 'summary_large_image',
    title: createTitle('K2AiHub Educational Content'),
    description: createDescription('N·ªÅn t·∫£ng h·ªçc t·∫≠p th√¥ng minh v·ªõi c√¥ng ngh·ªá AI d·∫´n l·ªëi'),
    images: ['https://images.unsplash.com/photo-1550751827-4bd374c3f58b?w=1200&h=600&fit=crop'],
  },
};

// Get unique regions and their statistics
interface RegionStats {
  name: string;
  count: number;
  totalPopulation: number;
  totalArea: number;
  cities: string[];
}

const regionStats = citiesData.reduce((acc, city) => {
  if (!acc[city.region]) {
    acc[city.region] = {
      name: city.region,
      count: 0,
      totalPopulation: 0,
      totalArea: 0,
      cities: []
    };
  }
  acc[city.region].count += 1;
  acc[city.region].totalPopulation += parseInt(city.population.replace(/[^0-9]/g, ''));
  acc[city.region].totalArea += parseFloat(city.area.replace(/[^0-9.]/g, ''));
  acc[city.region].cities.push(city.name);
  return acc;
}, {} as Record<string, RegionStats>);

const regions = Object.values(regionStats);

// Regional mapping for better SEO URLs
const regionSlugs = {
  'B·∫Øc B·ªô': 'bac-bo',
  'T√¢y B·∫Øc': 'tay-bac', 
  'ƒê√¥ng B·∫Øc': 'dong-bac',
  'ƒê·ªìng b·∫±ng B·∫Øc B·ªô': 'dong-bang-bac-bo',
  'B·∫Øc Trung B·ªô': 'bac-trung-bo',
  'Nam Trung B·ªô': 'nam-trung-bo',
  'T√¢y Nguy√™n': 'tay-nguyen',
  'ƒê√¥ng Nam B·ªô': 'dong-nam-bo',
  'ƒê·ªìng b·∫±ng s√¥ng C·ª≠u Long': 'dong-bang-song-cuu-long'
};

export default function RegionsPage() {
  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100">
      {/* Hero Section */}
      <div className="bg-gradient-to-br from-blue-600 to-indigo-700 text-white">
        <div className="max-w-6xl mx-auto px-4 py-16">
          <div className="text-center">
            <h1 className="text-4xl md:text-5xl font-bold mb-6">
              9 V√πng Mi·ªÅn Vi·ªát Nam
            </h1>
            <p className="text-xl text-blue-100 mb-8 max-w-4xl mx-auto">
              Kh√°m ph√° ƒë·∫∑c ƒëi·ªÉm ƒë·ªãa l√Ω, vƒÉn h√≥a v√† kinh t·∫ø ƒë·ªôc ƒë√°o c·ªßa t·ª´ng v√πng mi·ªÅn. 
              T·ª´ cao nguy√™n T√¢y B·∫Øc h√πng vƒ© ƒë·∫øn ƒë·ªìng b·∫±ng s√¥ng C·ª≠u Long m√†u m·ª°.
            </p>
            <div className="flex justify-center space-x-8 text-blue-100">
              <div className="text-center">
                <div className="text-3xl font-bold">9</div>
                <div className="text-sm">V√πng mi·ªÅn</div>
              </div>
              <div className="text-center">
                <div className="text-3xl font-bold">34</div>
                <div className="text-sm">T·ªânh th√†nh</div>
              </div>
              <div className="text-center">
                <div className="text-3xl font-bold">102 Tri·ªáu+</div>
                <div className="text-sm">D√¢n s·ªë</div>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Regions Grid */}
      <div className="max-w-6xl mx-auto px-4 py-16">
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
          {regions.map((region) => (
            <Link
              key={region.name}
              href={`/city/region/${regionSlugs[region.name as keyof typeof regionSlugs]}`}
              className="bg-white rounded-xl shadow-lg p-8 hover:shadow-xl transition-all duration-300 hover:scale-[1.02] group"
            >
              <div className="flex items-center justify-between mb-6">
                <h2 className="text-2xl font-bold text-gray-900 group-hover:text-blue-600 transition-colors">
                  {region.name}
                </h2>
                <div className="w-12 h-12 bg-gradient-to-br from-blue-500 to-indigo-600 rounded-full flex items-center justify-center text-white font-bold">
                  {region.count}
                </div>
              </div>

              <div className="space-y-4 mb-6">
                <div className="flex justify-between items-center">
                  <span className="text-gray-600">T·ªânh th√†nh:</span>
                  <span className="font-semibold text-blue-600">{region.count}</span>
                </div>
                <div className="flex justify-between items-center">
                  <span className="text-gray-600">D√¢n s·ªë:</span>
                  <span className="font-semibold">{region.totalPopulation.toLocaleString()}</span>
                </div>
                <div className="flex justify-between items-center">
                  <span className="text-gray-600">Di·ªán t√≠ch:</span>
                  <span className="font-semibold">{region.totalArea.toLocaleString()} km¬≤</span>
                </div>
              </div>

              <div className="mb-6">
                <h3 className="text-sm font-medium text-gray-900 mb-2">T·ªânh th√†nh ti√™u bi·ªÉu:</h3>
                <div className="flex flex-wrap gap-2">
                  {region.cities.slice(0, 3).map((city: string, cityIndex: number) => (
                    <span key={cityIndex} className="bg-blue-50 text-blue-700 text-xs px-2 py-1 rounded">
                      {city}
                    </span>
                  ))}
                  {region.cities.length > 3 && (
                    <span className="bg-gray-100 text-gray-600 text-xs px-2 py-1 rounded">
                      +{region.cities.length - 3} kh√°c
                    </span>
                  )}
                </div>
              </div>

              <div className="pt-4 border-t border-gray-100">
                <span className="text-blue-600 font-medium group-hover:text-blue-700 transition-colors">
                  Kh√°m ph√° v√πng {region.name} ‚Üí
                </span>
              </div>
            </Link>
          ))}
        </div>
      </div>

      {/* Call to Action */}
      <div className="bg-white py-16">
        <div className="max-w-4xl mx-auto px-4 text-center">
          <h2 className="text-3xl font-bold text-gray-900 mb-4">
            B·∫Øt ƒê·∫ßu H√†nh Tr√¨nh Kh√°m Ph√°
          </h2>
          <p className="text-lg text-gray-600 mb-8">
            T√¨m hi·ªÉu chi ti·∫øt v·ªÅ t·ª´ng t·ªânh th√†nh ho·∫∑c kh√°m ph√° to√†n b·ªô b·∫£n ƒë·ªì Vi·ªát Nam
          </p>
          <div className="flex flex-col sm:flex-row gap-4 justify-center">
            <Link
              href="/city"
              className="inline-flex items-center px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
            >
              üó∫Ô∏è Xem B·∫£n ƒê·ªì T∆∞∆°ng T√°c
            </Link>
            <Link
              href="/city"
              className="inline-flex items-center px-6 py-3 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors"
            >
              üìç Danh S√°ch T·ªânh Th√†nh
            </Link>
          </div>
        </div>
      </div>
    </div>
  );
}

export const dynamic = 'force-static';
